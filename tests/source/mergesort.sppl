include "stringlib.sppl"

def main : [String] -> [Int]
    | path : input : rest = mergesort(generate(0, parsestring(input), []))

def mergesort : [Int] -> [Int]
    | l = mergesortsplit(split(l, count(l)))

def mergesortsplit : ([Int], [Int], Int) -> [Int]
    | ([], l, c)  = l
    | (l, [], c)  = l
    | (l1, l2, c) = merge(mergesortsplit(split(l1, c)),
                          mergesortsplit(split(l2, c)))

def split : [Int] -> Int -> ([Int], [Int], Int)
    | l n = splitacc(l, [], n / 2, n)

def splitacc : [Int] -> [Int] -> Int -> Int -> ([Int], [Int], Int)
    | l acc n m when n == 0 = (acc, l, m)
    | x : xs acc n m        = splitacc(xs, x : acc, n - 1, m - 1)

def count : [Int] -> Int
    | l = countacc(l, 0)

def countacc : [Int] -> Int -> Int
    | [] res = res
    | x : xs res = countacc(xs, res + 1)

def merge : [Int] -> [Int] -> [Int]
    | [] []                    = []
    | x : l1 []                = x : merge(l1, [])
    | [] x : l1                = x : merge([], l1)
    | x : l1 y : l2 when x > y = y : merge(x : l1, l2)
    | x : l1 y : l2            = x : merge(l1, y : l2)

def generate : Int -> Int -> [Int] -> [Int]
    | n m list when n == m = list
    | n m list when n < m = generate(n + 1, m, ((n % 4 + n % 3 + n % 2 + n % 1) * n) : list)