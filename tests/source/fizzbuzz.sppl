def main : [String] -> [Int]
| (x : (par : rest)) = map(fizzbuzz, generate(parsestring(par), []))

def generate : Int -> [Int] -> [Int]
| 0 list = list
| n list = generate(n - 1, n : list)

def map : (Int -> Int) -> [Int] -> [Int]
| f []         = []
| f (x : rest) = f(x) : map(f, rest)

def fizzbuzz : Int -> Int
| n = ifelse(n % 3 == 0 && n % 5 == 0,
            -3
            ,
            ifelse(n % 5 == 0,
                -2
                ,
                ifelse(n % 3 == 0,
                    -1
                    ,
                    n
                )
            )
        )

def ifelse : Bool -> Int -> Int -> Int
| True a b = a
| False a b = b

def parsestring : String -> Int
| x = parsestringacc(x, 0)

def parsestringacc : String -> Int -> Int
| "" acc       = acc
| (x : xs) acc = parsestringacc(xs, (acc * 10) + parsechar(x))

def parsechar : CharPattern -> Int
| '0' = 0
| '1' = 1
| '2' = 2
| '3' = 3
| '4' = 4
| '5' = 5
| '6' = 6
| '7' = 7
| '8' = 8
| '9' = 9